2 major components -
    1. A programming language(java, JS, PHP, Golang, c++) -> using a framework (django, express, etc)
    2. A Database (Mongo, MySQL, Postgres, Sqlite, etc) -> ORM , ODM 


    Browser <-> API <-> Backend <-> DB (anoher continent)

JavaScript Based Backend(Express and Mongoose)

3 works -> data, file, Third Party API

File Structures ->
    Src
        index -> DB connects
        app -> config, cookies
        constants -> enums, DB-name

    Directory Structures-
        DB
        Models - schema(Structures)
        Controllers - methods(functions) 
        Routes 
        Middlewares
        Utils - utilities
        More(depends)


Computer <-- Express --> Server ; Express -> handles requests and responds

app.ABCXYZ('/path' , (req, res) => {
    app.XYZ1('test1')
})
    eg-
    app.get('/', (req, res) => {
        app.send('Hello world!')
    }) -> this get data from server home Directory, send a request and get "Hello World!" as response
    app.listen(process.env.PORT, () => {
        console.log(`Example app listening on port ${process.env.PORT}`)
    }) -> server listening on local host port provided in .env file

** always try to make schema of data, before proceding with coding -> make screens before coding (DATA MODELLING) => "mongoose" is used 

import mongoose from 'mongoose'

const userSchema = new mongoose.Schema({
    test1 : {
        type: .......
    },
    test2 ......
} , {timestamps : true})

export const user = mongoose.model('user', userSchema)






Access Token -> usually short lived -> after its is expired -> we need to again enter login id password again to login => REFRESH TOKEN -> refresh token is sent along with request -> it is then checked in backend stored refresh token , if matched new access token is generated and user is logged in without entering id pass


HTTP -> Hyper Text Transfer Protocol
HTTP Headers -> 
    metadata --> key-value pairs set along wiht request and response
    used for caching, authentication, manage state , etc

    Types ->
        Request Headers -> from client
        Respons Headers -> from server
        Representation Headers -> encoding/compression
        Payload Headers -> data

    Most Common Headers -> 
        Accept : application/json
        User-Agent -> konsi application se request aayi hai
        Authorization -> 
        Content-type -> images, pdf , blah blah
        cookies -> object (itne time tak user login rhega , etc etc)
        Cache-control 

    CORS headers
    Security headers

HTTP methods -> Basic set of operations that can be used to interact with server
    GET - retrieve a resource
    HEAD - no message body (response headers only)
    OPTIONS - what operations are available
    TRACE - loopback test (get some data)
    DELETE - remove a resource
    PUT - replace a resource
    POST - interact with resource (mostly add)
    PATCH - change part of resource 

HTTP Status Code -> 
    1xx - informational
    2xx - success
    3xx - redirection
    4xx - client error
    5xx - server error



SUBSCRIPTION SCHEMA --> har bar naya document banta hai {subscriber, channel} -> no of subscriber = no of document with "channel"
eg - user = a, b, c, d, e
    channel = cac, hcc, fcc 

    suppose -> 
        a subscribed cac => {subscriber : a ,channel : cac}
        b subscribed cac => {subscriber : b , channel: cac}
        c subscribed cac => {subscriber : c, channel : cac}
        c subscribed hcc => {subscriber: c , channel : hcc}
        c subscribed fcc => {subscriber : c, channel : fcc}

    no of subscriber of cac = no of documents with channel : cac
    no of channels c subscribed = no of documents with subscriber : c



